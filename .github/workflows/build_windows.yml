name: Build bpy for Windows

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Blender Tag to build'
        required: true
        default: 'v4.3.2'
      python_version:
        description: 'Python version to use'
        required: true
        default: '3.11.9'
  
  workflow_call:
    inputs:
      tag:
        description: 'Blender Tag to build'
        required: true
        type: string
      python_version:
        description: 'Python version to use'
        required: true
        default: '3.10.11'
        type: string

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Free up disk space
        run: |
          # Clean up Windows temp files
          Get-ChildItem -Path $env:TEMP -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          Get-ChildItem -Path "C:\Windows\Temp" -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          
          # Remove unused Windows features and packages (with error handling)
          try {
            Get-WindowsOptionalFeature -Online | Where-Object {$_.State -eq "Enabled"} | Where-Object {$_.FeatureName -like "*MediaPlayer*" -or $_.FeatureName -like "*Internet-Explorer*"} | Disable-WindowsOptionalFeature -Online -NoRestart -ErrorAction SilentlyContinue
          } catch {
            Write-Host "Could not disable optional features: $($_.Exception.Message)"
          }
          
          # Clean package cache (with timeout)
          try {
            Start-Process -FilePath "dism" -ArgumentList "/online", "/Cleanup-Image", "/StartComponentCleanup", "/ResetBase" -Wait -TimeoutSec 300 -ErrorAction SilentlyContinue
          } catch {
            Write-Host "DISM cleanup timed out or failed: $($_.Exception.Message)"
          }
          
          # Show disk space before cleanup
          Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}

      - name: checkout repo
        uses: actions /checkout@v2

      # - name: Set environment variables
      #   id: set_env
      #   run: |
      #     TAG=${{ inputs.tag || github.event.inputs.tag }}
      #     PYTHON_VERSION=${{ inputs.python_version || github.event.inputs.python_version }}
      #     echo "TAG=$TAG" >> $GITHUB_ENV
      #     echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
      #   shell: bash
                    
      # - name: Checkout Blender repository recursively
      #   uses: actions/checkout@v2
      #   with:
      #     repository: blender/blender
      #     ref: ${{ env.TAG}}
      #     submodules: 'recursive' 
      #     path: blender 

      # - name: Install Chocolatey
      #   run: |
      #     Set-ExecutionPolicy Bypass -Scope Process -Force
      #     Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     # python-version: '3.10.11' 
      #     python-version: ${{ env.PYTHON_VERSION }}

      
      # - name: Set Python Path and Run make.bat
      #   run: |
      #     set Python=C:\hostedtoolcache\windows\Python\3.10.11\x64\python.exe
      #     echo %Python%
      #   shell: cmd

      # - name: list env vars
      #   run: |
      #     # Set "Python=C:\hostedtoolcache\windows\Python\3.10.11\x64\python.exe"
      #     # echo "Python=C:\hostedtoolcache\windows\Python\3.10.11\x64\python.exe" | Out-File -Append -FilePath $env:GITHUB_ENV
      #     Get-ChildItem Env:
      
      # - name: Install Visual Studio Community Edition
      #   run: |
      #     choco install visualstudio2022-workload-nativedesktop

      # - name: Install CUDA
      #   run: |
      #     choco install cuda
      #     Add-Content $env:GITHUB_PATH "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.2\bin"

      # - name: Install TortoiseSVN and Command Line Client Tools
      #   run: |
      #     choco install tortoisesvn

      # - name: Install CMake
      #   run: |
      #     choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'


      # - name: Add CUDA compilation flags
      #   run: |
      #     nvcc --version
      #     "set(WITH_CYCLES_CUDA_BINARIES   ON  CACHE BOOL '' FORCE)" | Out-File -Append -FilePath ./blender/build_files/cmake/config/bpy_module.cmake
      
      # # - name: Set CUDA environment variables
      # #   run: |
      # #     $NVCC_PATH = Get-Command nvcc | Select-Object -ExpandProperty Source
      # #     $CUDA_HOME = Split-Path (Split-Path $NVCC_PATH -Parent) -Parent
      # #     echo "CUDA_HOME=$CUDA_HOME" | Out-File -Append -FilePath $env:GITHUB_ENV
      # #     echo "CPLUS_INCLUDE_PATH=$CUDA_HOME\include;$env:CPLUS_INCLUDE_PATH" | Out-File -Append -FilePath $env:GITHUB_ENV
      # #     echo "C_INCLUDE_PATH=$CUDA_HOME\include;$env:C_INCLUDE_PATH" | Out-File -Append -FilePath $env:GITHUB_ENV

      # # - name: Refresh env
      # #   run: |
      # #     refreshenv


      # - name: Cache Blender dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ./lib
      #     key: ${{ runner.os }}-blender-deps-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-blender-deps-


      # - name: Cache build files (for testing only)
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ./build_windows_Bpy_x64_vc17_Release
      #     key: ${{ runner.os }}-blender-build-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-blender-build-

      # - name: download svn librares
      #   run: |
      #     if [ ! -d "./lib" ]; then
      #       mkdir ./lib
      #       cd ./lib
      #       svn checkout https://svn.blender.org/svnroot/bf-blender/trunk/lib/win64_vc15
      #     fi
      #   shell: bash


      # # - name: Set Python Path
      # #   run: |
      # #      chcp 65001 #set code page to utf-8
      # #      echo "PYTHON=C:\hostedtoolcache\windows\Python\3.10.11\x64\python.exe" >> $env:GITHUB_ENV

      # - name: list env vars
      #   run: |
      #     Get-ChildItem Env:
      
      # - name: Run make.bat
      #   run: |

      #     cd blender

      #     yes| make update
      #     make bpy
      #   shell: cmd

      # - name: Download Blender Python API Stubs
      #   id: download-artifact
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     workflow: generate_stubs.yml
      #     # github_token: ${{secrets.GITHUB_TOKEN}}
      #     name: blender-python-api-stubs-${{ env.TAG }}
      #     path: ./stubs

      # - name: Copy Blender Python API Stubs into bin
      #   run: |
      #     cp -r ./stubs/* ./build_windows_Bpy_x64_vc17_Release/bin/Release
      #   shell: bash
  

      # # - name: Setup terminal session
      # #   uses: fawazahmed0/action-debug@main
      # #   with:
      # #       credentials: "user:p@ss!"


          
      # - name: Make Wheel
      #   run: |
      #     pip install -U pip setuptools wheel
      #     # remove the old wheel if it exists
      #     rm ./build_windows_Bpy_x64_vc17_Release/bin/*.whl
      #     python blender/build_files/utils/make_bpy_wheel.py ./build_windows_Bpy_x64_vc17_Release/bin/Release
      #   shell: bash

      # # - name: Upload Wheel as Artifact
      # #   uses: actions/upload-artifact@v2
      # #   with:
      # #     name: bpy-windows
      # #     path: |
      # #       ./build_windows_Bpy_x64_vc17_Release/bin/Release/*.whl

      # - name: Install Dependencies
      #   run: |
      #     python -m pip install --upgrade pip ndg-httpsclient pyopenssl pyasn1
      #     pip install -r requirements.txt
 

      # - name: Publish Wheel
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: python workspace/build_blender.py publish-github ${{ env.TAG }} ./build_windows_Bpy_x64_vc17_Release/bin/Release




      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set environment variables
        id: set_env
        run: |
          TAG=${{ inputs.tag || github.event.inputs.tag }}
          PYTHON_VERSION=${{ inputs.python_version || github.event.inputs.python_version }}
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
        shell: bash
                    
      # - name: Checkout Blender repository recursively
      #   uses: actions/checkout@v2
      #   with:
      #     repository: blender/blender
      #     ref: ${{ env.TAG }}
      #     submodules: 'recursive' 
      #     path: blender 

      - name: Install Chocolatey to D Drive
        run: |
          # Set Chocolatey install location to D drive
          [Environment]::SetEnvironmentVariable("ChocolateyInstall", "D:\choco", "Machine")
          $env:ChocolateyInstall = "D:\choco"
          
          # Create the directory
          New-Item -ItemType Directory -Path "D:\choco" -Force
          
          # Install Chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          
          # Add Chocolatey to PATH for this session
          $env:PATH += ";D:\choco\bin"
          
          # Add to GitHub PATH for subsequent steps
          Add-Content $env:GITHUB_PATH "D:\choco\bin"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}


      - name: Set Python Path and Run make.bat
        run: |
          set Python=C:\hostedtoolcache\windows\Python\${{ env.PYTHON_VERSION }}\x64\python.exe
          echo %Python%
        shell: cmd

      - name: list env vars
        run: |
          # Set "Python=C:\hostedtoolcache\windows\Python\3.10.11\x64\python.exe"
          # echo "Python=C:\hostedtoolcache\windows\Python\3.10.11\x64\python.exe" | Out-File -Append -FilePath $env:GITHUB_ENV
          Get-ChildItem Env:
      
      - name: Install Visual Studio Build Tools (optimized) to D Drive
        run: |
          # Set package cache to D drive to save C drive space
          choco config set cacheLocation D:\choco-cache
          
          # Install VS2022 Community with C++ workload
          choco install visualstudio2022community -y --install-directory="D:\VS2022"
          choco install visualstudio2022-workload-nativedesktop -y


      - name: Clean up after VS installation
        run: |
          # Clean VS installer cache
          Remove-Item -Path "$env:ProgramData\Microsoft\VisualStudio\Packages" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue

      - name: Install CUDA to D Drive
        run: |
          # Install CUDA with custom install directory
          choco install cuda --version 12.8.1.572 -y --params "'/InstallPath:D:\CUDA'"
          
          # Add CUDA to PATH
          Add-Content $env:GITHUB_PATH "D:\CUDA\bin"
          Add-Content $env:GITHUB_PATH "D:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.8\bin"
          
      - name: Clean up after CUDA installation
        run: |
          # Remove CUDA installer files
          Remove-Item -Path "$env:TEMP\*cuda*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\ProgramData\NVIDIA Corporation\CUDA Samples" -Recurse -Force -ErrorAction SilentlyContinue
          
      - name: Install TortoiseSVN and Command Line Client Tools
        run: |
          choco install tortoisesvn

      - name: Install CMake
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

      - name: Clean chocolatey cache
        run: |
          # Clean chocolatey cache and temp files from D drive
          Remove-Item -Path "D:\choco-cache\*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "D:\choco\temp\*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "D:\choco\logs\*" -Recurse -Force -ErrorAction SilentlyContinue
          
          # Clean up any remaining temp files
          Get-ChildItem -Path $env:TEMP -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue

      - name: Add CUDA compilation flags
        run: |
          nvcc --version
          # "set(WITH_CYCLES_CUDA_BINARIES   ON  CACHE BOOL '' FORCE)" | Out-File -Append -FilePath ./blender/build_files/cmake/config/bpy_module.cmake

      - name: Install Python Dependencies
        run: |
          pip install -r ./requirements.txt

      - name: Update Python
        run: |
          pip install -U pip setuptools wheel

      - name: Check disk space before build
        run: |
          Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}

      - name: Build Blender
        run: |
          # Set compiler temp directory to a custom location
          $env:TMP = "D:\temp"
          $env:TEMP = "D:\temp"
          New-Item -ItemType Directory -Path "D:\temp" -Force
          
          python -m src.buildbpy.main --tag ${{ env.TAG }} --install --publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TMP: D:\temp
          TEMP: D:\temp

      - name: Clean up build intermediates
        run: |
          # Clean up build temp files
          Remove-Item -Path "D:\temp\*" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "$env:USERPROFILE\.buildbpy\build_*\CMakeFiles" -Recurse -Force -ErrorAction SilentlyContinue
          
          # Clean up object files
          Get-ChildItem -Path "$env:USERPROFILE\.buildbpy" -Include "*.obj", "*.pdb", "*.ilk" -Recurse | Remove-Item -Force -ErrorAction SilentlyContinue

      - name: Install compatible numpy version
        run: |
          pip install "numpy<2.0"
  
      - name: Test bpy and numpy import
        run: |
          python -c '
          import sys, traceback
          try:
              import numpy
              import bpy
              print("Imported bpy:", bpy.app.version)
          except Exception:
              traceback.print_exc()
              sys.exit(1)
          '

      - name: Final cleanup
        run: |
          # Final cleanup of temp files
          Get-ChildItem -Path $env:TEMP -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          Get-ChildItem -Path "C:\Windows\Temp" -Recurse | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
          
          # Show final disk space
          Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}

      
      # - name: Set CUDA environment variables
      #   run: |
      #     $NVCC_PATH = Get-Command nvcc | Select-Object -ExpandProperty Source
      #     $CUDA_HOME = Split-Path (Split-Path $NVCC_PATH -Parent) -Parent
      #     echo "CUDA_HOME=$CUDA_HOME" | Out-File -Append -FilePath $env:GITHUB_ENV
      #     echo "CPLUS_INCLUDE_PATH=$CUDA_HOME\include;$env:CPLUS_INCLUDE_PATH" | Out-File -Append -FilePath $env:GITHUB_ENV
      #     echo "C_INCLUDE_PATH=$CUDA_HOME\include;$env:C_INCLUDE_PATH" | Out-File -Append -FilePath $env:GITHUB_ENV

      # - name: Refresh env
      #   run: |
      #     refreshenv


      # - name: Cache Blender dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ./lib
      #     key: ${{ runner.os }}-blender-lib-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-blender-lib-

      # - name: Cache build files (for testing only)
      #   uses: actions/cache@v2
      #   with:
      #     path: |
      #       ./build_windows_Bpy_x64_vc17_Release
      #     key: ${{ runner.os }}-blender-build-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-blender-build-

      # - name: download svn librares
      #   run: |
      #     if [ ! -d "./lib" ]; then
      #       mkdir ./lib
      #       cd ./lib
      #       svn checkout https://svn.blender.org/svnroot/bf-blender/trunk/lib/win64_vc15
      #     fi
      #   shell: bash

      # - name: SVN Cleanup (Preemptive)
      #   run: |
      #     svn cleanup D:/a/bpy/bpy/blender/../lib/assets
      #     svn cleanup D:/a/bpy/bpy/blender/../lib/win64_vc15

      # - name: SVN Cleanup
      #   run: svn cleanup D:/a/bpy/bpy/lib/win64_vc15

      

      # - name: Set Python Path
      #   run: |
      #      chcp 65001 #set code page to utf-8
      #      echo "PYTHON=C:\hostedtoolcache\windows\Python\3.10.11\x64\python.exe" >> $env:GITHUB_ENV

      - name: list env vars
        run: |
          Get-ChildItem Env:

      # - name: Extract Blender Major Version Number
      #   id: version_extraction
      #   run: |
      #     python -c "import sys; version_tag = sys.argv[1].lstrip('v'); parts = version_tag.split('.'); major_version = '.'.join(parts[:2]); print(f'MAJOR_VERSION={major_version}')" "${{ env.TAG }}" >> $GITHUB_ENV
      #   shell: bash

      # - name: Download Precompiled Binaries for the Release
      #   run: |
      #     mkdir lib
      #     cd lib
      #     svn checkout https://svn.blender.org/svnroot/bf-blender/tags/blender-${{ env.MAJOR_VERSION }}-release/lib/win64_vc15
      #   shell: cmd

      # - name: Download Blender Python API Stubs
      #   id: download-artifact
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     workflow: build_all.yml
      #     # github_token: ${{secrets.GITHUB_TOKEN}}
      #     name: blender-python-api-stubs-${{ env.TAG }}
      #     path: ./build_windows_Bpy_x64_vc17_Release/bin/
      
      # - name: Download Blender Python API Stubs
      #   id: download-artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: blender-python-api-stubs-${{ env.TAG }}
      #     path: ./build_windows_Bpy_x64_vc17_Release/bin/
      
      # - name: Build Blender
      #   run: |
      #     cd blender
      #     yes| make update
      #     make bpy
      #   shell: cmd


      # - name: Make Wheel
      #   run: |
      #     pip install -U pip setuptools wheel
      #     copy ./workspace/make_bpy_wheel.py ./blender/build_files/utils/
      #     python blender\build_files\utils\make_bpy_wheel.py .\build_windows_Bpy_x64_vc17_Release\bin\
      # # - name: Upload Wheel as Artifact
      # #   uses: actions/upload-artifact@v2
      # #   with:
      # #     name: bpy-windows
      # #     path: |
      # #       ./build_windows_Bpy_x64_vc17_Release/bin/*.whl

      # - name: Install Dependencies
      #   run: |
      #     python -m pip install --upgrade pip ndg-httpsclient pyopenssl pyasn1
      #     pip install -r requirements.txt
 

      # - name: Publish Wheel
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: python workspace/build_blender.py publish-github ${{ env.TAG }} ./build_windows_Bpy_x64_vc17_Release/bin/ 
